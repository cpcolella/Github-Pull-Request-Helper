# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.4
        id: checkout
        with:
          fetch-depth: '0'
      
      # Creates a tag and bumps the version number up
      - name: Get New Version Number
        id: newVersionNumber
        uses: anothrNick/github-tag-action@1.56.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: cpcolella
          INITIAL_VERSION: 2.0.0
          DRY_RUN: true
          WITH_V: false
      
      # Creates a tag and bumps the version number up
      - name: Github Tag Bump
        id: tagBump
        uses: anothrNick/github-tag-action@1.56.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: cpcolella
          INITIAL_VERSION: 2.0.0
          WITH_V: true
      
      - name: Create Release Folder
        id: createReleaseFolder
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' . ./release_${{ steps.tagBump.outputs.new_tag }}
      
      - name: Create Release Folder
        id: updateVersionInManifest
        run: sed -i 's/"2.0.0"/"${{ steps.newVersionNumber.outputs.new_tag }}"/g' ./release_${{ steps.tagBump.outputs.new_tag }}/manifest.json
      
      - name: Print Release Folder Contents
        id: printFolder
        run: ls -la release_${{ steps.tagBump.outputs.new_tag }}
      
      - name: Zip Folder
        id: zipFolder
        run: zip -r gpr_helper_${{ steps.tagBump.outputs.new_tag }}.zip ./release_${{ steps.tagBump.outputs.new_tag }} -x ".git/*" ".github/*"
      
      - name: Create a Release
        id: createRelease
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ steps.tagBump.outputs.new_tag }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: Release ${{ steps.tagBump.outputs.new_tag }}
          # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
          draft: false
          # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
          prerelease: false
          # Owner of the repository if it is not the current one
          owner: cpcolella
      
      - name: Upload a Release Asset
        id: uploadZipToRelease
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createRelease.outputs.upload_url }}
          asset_path: ./gpr_helper_${{ steps.tagBump.outputs.new_tag }}.zip
          asset_name: gpr_helper_${{ steps.tagBump.outputs.new_tag }}.zip
          asset_content_type: application/zip
      
      - name: Chrome Extension Upload & Publish
        uses: cpcolella/chrome-addon@master
        with:
          extension-id: '${{ secrets.APP_ID }}'
          zip-path: 'gpr_helper_${{ steps.tagBump.outputs.new_tag }}.zip'
          client-id: '${{ secrets.CLIENT_ID }}'
          refresh-token: '${{ secrets.REFRESH_TOKEN }}'
          publish-target: 'default'
          
